---
title: Homework 7 - Creating a resume database
author: Celeste Olmstead
date: 11/16/2023
format:
    html:
        theme: minty
        toc: true
        embed-resources: true
        code-copy: true
---

This document contains a description of a database, a review of its design, example data from the major tables, and some sample queries.

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-olmsteadca>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This assignment gives us more practice writing SQL queries, but, more importantly, gives us a lot of practice writing a DDL file. This assignment is helpful in getting used to MySQL syntax. The database built in this assignment is for a team of devlopers looking to advertise themselves better by keeping track of the skills their people have and what role(s) they play in the team.

## Crows-foot diagram

This diagram shows the 3 entities: people, skills, and roles. You can see that 0 or many people can acquire 0 or many skills. Also, 0 or more people can be appointed to 1 or more roles. 0 or more people can be appointed to 0 or more roles.

```{mermaid}
erDiagram
    PEOPLE }o--o{ SKILLS: acquires
    PEOPLE }o--|{ ROLES: appointed_to

    PEOPLE {
        int people_id
        varchar first_name
        varchar last_name
        varchar email
        varchar linkedin_url
        varchar headshot_url
        varchar discord_handle
        varchar brief_bio
        date date_joined
    }
    SKILLS {
        int skill_id
        varchar name
        varchar description
        varchar tag
        varchar url
        int time_committment
    }
    ROLES {
        int role_id
        varchar name
        int sort_priority
    }
```

## Examples of data in the database

This section will include data from the three major tables: people, skills, and roles.

### People table

The *people* table contains elements that describe a team member and provide their contact information.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe a skill, whether the team currently has someone with it or are planning to acquire the skill, as well as the dates these skills were acquired.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe the 6 different roles a team member can be appointed to, as well as a column specifying how to prioritize them when sorting.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true

sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Sample queries

Let's explore the database!

### List skill names, tags, and descriptions ordered by name
```{python}
sql = f"""
select name, tag, description from skills order by name
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
sql = f"""
select people_first_name, people_last_name, email from people order by abs(people_last_name)
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1
```{python}
sql = f"""
select name from skills
join peopleskills on skills.skill_id = peopleskills.skills_id
where peopleskills.people_id = 1
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
sql = f"""
select people_first_name, people_last_name from people
join peopleskills on people.people_id = peopleskills.people_id
where peopleskills.skills_id = 6
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role
```{python}
sql = f"""
select * from people
join peopleroles on people.people_id = peopleroles.people_id
where peopleroles.role_id = 2
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
sql = f"""
select people_first_name, people_last_name, email from people
left join peopleskills on people.people_id = peopleskills.people_id
where peopleskills.id is null
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
sql = f"""
select name, tag from skills
left join peopleskills on skills.skill_id = peopleskills.skills_id
where peopleskills.id is null
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people names and skill names with the BOSS role
```{python}
sql = f"""
select people_first_name, people_last_name, skills.name from people
join peopleroles on people.people_id = peopleroles.people_id
join roles on peopleroles.role_id = roles.role_id
left join peopleskills on people.people_id = peopleskills.people_id
left join skills on peopleskills.skills_id = skills.skill_id
where roles.role_id = 5
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
sql = f"""
select roles.role_id, name from roles
left join peopleroles on roles.role_id = peopleroles.role_id
where peopleroles.id is null
"""
```
```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I really enjoyed this assignment - coming up with skills and people was fun. I had some frustrating moments where my syntax was off. Since there are so many different types of SQL servers apparently, finding correct information was difficult. I think the sample queries were a good mix of straightforward and more complex queries. I also think this assignment showed me the importance of naming consistently. One issue I had was that, in peopleskills the skills were identified by skills_id, while they're identified by skill_id in the skills table. I think this was a good sample to get us ready to make our databases for the semester project.

